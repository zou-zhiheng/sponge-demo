// Package config is a package that parses configuration files into structures, and supports
// parsing docker-compose-yaml, json and toml files., code generated by https://user.
package config

import (
	"github.com/zhufuyi/sponge/pkg/conf"
)

var config *Config

func Init(configFile string, fs ...func()) error {
	config = &Config{}
	return conf.Parse(configFile, config, fs...)
}

func Show(hiddenFields ...string) string {
	return conf.Show(config, hiddenFields...)
}

func Get() *Config {
	if config == nil {
		panic("config is nil")
	}
	return config
}

func Set(conf *Config) {
	config = conf
}

type Config struct {
	App        App          `docker-compose-yaml:"app" json:"app"`
	Consul     Consul       `docker-compose-yaml:"consul" json:"consul"`
	Etcd       Etcd         `docker-compose-yaml:"etcd" json:"etcd"`
	Grpc       Grpc         `docker-compose-yaml:"grpc" json:"grpc"`
	GrpcClient []GrpcClient `docker-compose-yaml:"grpcClient" json:"grpcClient"`
	HTTP       HTTP         `docker-compose-yaml:"http" json:"http"`
	Jaeger     Jaeger       `docker-compose-yaml:"jaeger" json:"jaeger"`
	Logger     Logger       `docker-compose-yaml:"logger" json:"logger"`
	Mysql      Mysql        `docker-compose-yaml:"mysql" json:"mysql"`
	NacosRd    NacosRd      `docker-compose-yaml:"nacosRd" json:"nacosRd"`
	Redis      Redis        `docker-compose-yaml:"redis" json:"redis"`
}

type Consul struct {
	Addr string `docker-compose-yaml:"addr" json:"addr"`
}

type Etcd struct {
	Addrs []string `docker-compose-yaml:"addrs" json:"addrs"`
}

type Jaeger struct {
	AgentHost string `docker-compose-yaml:"agentHost" json:"agentHost"`
	AgentPort int    `docker-compose-yaml:"agentPort" json:"agentPort"`
}

type ClientToken struct {
	AppID  string `docker-compose-yaml:"appID" json:"appID"`
	AppKey string `docker-compose-yaml:"appKey" json:"appKey"`
	Enable bool   `docker-compose-yaml:"enable" json:"enable"`
}

type ClientSecure struct {
	CaFile     string `docker-compose-yaml:"caFile" json:"caFile"`
	CertFile   string `docker-compose-yaml:"certFile" json:"certFile"`
	KeyFile    string `docker-compose-yaml:"keyFile" json:"keyFile"`
	ServerName string `docker-compose-yaml:"serverName" json:"serverName"`
	Type       string `docker-compose-yaml:"type" json:"type"`
}

type ServerSecure struct {
	CaFile   string `docker-compose-yaml:"caFile" json:"caFile"`
	CertFile string `docker-compose-yaml:"certFile" json:"certFile"`
	KeyFile  string `docker-compose-yaml:"keyFile" json:"keyFile"`
	Type     string `docker-compose-yaml:"type" json:"type"`
}

type App struct {
	CacheType             string  `docker-compose-yaml:"cacheType" json:"cacheType"`
	EnableCircuitBreaker  bool    `docker-compose-yaml:"enableCircuitBreaker" json:"enableCircuitBreaker"`
	EnableHTTPProfile     bool    `docker-compose-yaml:"enableHTTPProfile" json:"enableHTTPProfile"`
	EnableLimit           bool    `docker-compose-yaml:"enableLimit" json:"enableLimit"`
	EnableMetrics         bool    `docker-compose-yaml:"enableMetrics" json:"enableMetrics"`
	EnableStat            bool    `docker-compose-yaml:"enableStat" json:"enableStat"`
	EnableTrace           bool    `docker-compose-yaml:"enableTrace" json:"enableTrace"`
	Env                   string  `docker-compose-yaml:"env" json:"env"`
	Host                  string  `docker-compose-yaml:"host" json:"host"`
	Name                  string  `docker-compose-yaml:"name" json:"name"`
	RegistryDiscoveryType string  `docker-compose-yaml:"registryDiscoveryType" json:"registryDiscoveryType"`
	TracingSamplingRate   float64 `docker-compose-yaml:"tracingSamplingRate" json:"tracingSamplingRate"`
	Version               string  `docker-compose-yaml:"version" json:"version"`
}

type GrpcClient struct {
	ClientSecure          ClientSecure `docker-compose-yaml:"clientSecure" json:"clientSecure"`
	ClientToken           ClientToken  `docker-compose-yaml:"clientToken" json:"clientToken"`
	EnableLoadBalance     bool         `docker-compose-yaml:"enableLoadBalance" json:"enableLoadBalance"`
	Host                  string       `docker-compose-yaml:"host" json:"host"`
	Name                  string       `docker-compose-yaml:"name" json:"name"`
	Port                  int          `docker-compose-yaml:"port" json:"port"`
	RegistryDiscoveryType string       `docker-compose-yaml:"registryDiscoveryType" json:"registryDiscoveryType"`
}

type Mysql struct {
	ConnMaxLifetime int      `docker-compose-yaml:"connMaxLifetime" json:"connMaxLifetime"`
	Dsn             string   `docker-compose-yaml:"dsn" json:"dsn"`
	EnableLog       bool     `docker-compose-yaml:"enableLog" json:"enableLog"`
	MastersDsn      []string `docker-compose-yaml:"mastersDsn" json:"mastersDsn"`
	MaxIdleConns    int      `docker-compose-yaml:"maxIdleConns" json:"maxIdleConns"`
	MaxOpenConns    int      `docker-compose-yaml:"maxOpenConns" json:"maxOpenConns"`
	SlavesDsn       []string `docker-compose-yaml:"slavesDsn" json:"slavesDsn"`
	SlowThreshold   int      `docker-compose-yaml:"slowThreshold" json:"slowThreshold"`
}

type Redis struct {
	DialTimeout  int    `docker-compose-yaml:"dialTimeout" json:"dialTimeout"`
	Dsn          string `docker-compose-yaml:"dsn" json:"dsn"`
	ReadTimeout  int    `docker-compose-yaml:"readTimeout" json:"readTimeout"`
	WriteTimeout int    `docker-compose-yaml:"writeTimeout" json:"writeTimeout"`
}

type Grpc struct {
	EnableToken  bool         `docker-compose-yaml:"enableToken" json:"enableToken"`
	HTTPPort     int          `docker-compose-yaml:"httpPort" json:"httpPort"`
	Port         int          `docker-compose-yaml:"port" json:"port"`
	ReadTimeout  int          `docker-compose-yaml:"readTimeout" json:"readTimeout"`
	ServerSecure ServerSecure `docker-compose-yaml:"serverSecure" json:"serverSecure"`
	WriteTimeout int          `docker-compose-yaml:"writeTimeout" json:"writeTimeout"`
}

type Logger struct {
	Format string `docker-compose-yaml:"format" json:"format"`
	IsSave bool   `docker-compose-yaml:"isSave" json:"isSave"`
	Level  string `docker-compose-yaml:"level" json:"level"`
}

type NacosRd struct {
	IPAddr      string `docker-compose-yaml:"ipAddr" json:"ipAddr"`
	NamespaceID string `docker-compose-yaml:"namespaceID" json:"namespaceID"`
	Port        int    `docker-compose-yaml:"port" json:"port"`
}

type HTTP struct {
	Port         int `docker-compose-yaml:"port" json:"port"`
	ReadTimeout  int `docker-compose-yaml:"readTimeout" json:"readTimeout"`
	WriteTimeout int `docker-compose-yaml:"writeTimeout" json:"writeTimeout"`
}
